/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/me/h1_inspire_service.worktrees/Yxy_Dev/hand_idl/inspire_hand_ctrl.idl
  Source: inspire_hand_ctrl.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_INSPIRE_HAND_CTRL_HPP_925674ADC5EE42F268CBA1FFDD5480B1
#define DDSCXX_INSPIRE_HAND_CTRL_HPP_925674ADC5EE42F268CBA1FFDD5480B1

#include <utility>
#include <ostream>
#include <cstdint>
#include <vector>

namespace inspire
{
class inspire_hand_ctrl
{
private:
 std::vector<int16_t> pos_set_;
 std::vector<int16_t> angle_set_;
 std::vector<int16_t> force_set_;
 std::vector<int16_t> speed_set_;
 int8_t mode_ = 0;

public:
  inspire_hand_ctrl() = default;

  explicit inspire_hand_ctrl(
    const std::vector<int16_t>& pos_set,
    const std::vector<int16_t>& angle_set,
    const std::vector<int16_t>& force_set,
    const std::vector<int16_t>& speed_set,
    int8_t mode) :
    pos_set_(pos_set),
    angle_set_(angle_set),
    force_set_(force_set),
    speed_set_(speed_set),
    mode_(mode) { }

  const std::vector<int16_t>& pos_set() const { return this->pos_set_; }
  std::vector<int16_t>& pos_set() { return this->pos_set_; }
  void pos_set(const std::vector<int16_t>& _val_) { this->pos_set_ = _val_; }
  void pos_set(std::vector<int16_t>&& _val_) { this->pos_set_ = std::move(_val_); }
  const std::vector<int16_t>& angle_set() const { return this->angle_set_; }
  std::vector<int16_t>& angle_set() { return this->angle_set_; }
  void angle_set(const std::vector<int16_t>& _val_) { this->angle_set_ = _val_; }
  void angle_set(std::vector<int16_t>&& _val_) { this->angle_set_ = std::move(_val_); }
  const std::vector<int16_t>& force_set() const { return this->force_set_; }
  std::vector<int16_t>& force_set() { return this->force_set_; }
  void force_set(const std::vector<int16_t>& _val_) { this->force_set_ = _val_; }
  void force_set(std::vector<int16_t>&& _val_) { this->force_set_ = std::move(_val_); }
  const std::vector<int16_t>& speed_set() const { return this->speed_set_; }
  std::vector<int16_t>& speed_set() { return this->speed_set_; }
  void speed_set(const std::vector<int16_t>& _val_) { this->speed_set_ = _val_; }
  void speed_set(std::vector<int16_t>&& _val_) { this->speed_set_ = std::move(_val_); }
  int8_t mode() const { return this->mode_; }
  int8_t& mode() { return this->mode_; }
  void mode(int8_t _val_) { this->mode_ = _val_; }

  bool operator==(const inspire_hand_ctrl& _other) const
  {
    (void) _other;
    return pos_set_ == _other.pos_set_ &&
      angle_set_ == _other.angle_set_ &&
      force_set_ == _other.force_set_ &&
      speed_set_ == _other.speed_set_ &&
      mode_ == _other.mode_;
  }

  bool operator!=(const inspire_hand_ctrl& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, inspire_hand_ctrl const& rhs);

} //namespace inspire

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::inspire::inspire_hand_ctrl>::getTypeName()
{
  return "inspire::inspire_hand_ctrl";
}

template <> constexpr bool TopicTraits<::inspire::inspire_hand_ctrl>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::inspire::inspire_hand_ctrl>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::inspire::inspire_hand_ctrl>::type_map_blob_sz() { return 414; }
template<> constexpr unsigned int TopicTraits<::inspire::inspire_hand_ctrl>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::inspire::inspire_hand_ctrl>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x8b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xcd,  0xeb,  0xe3,  0x9d,  0x58,  0x9e,  0x3a, 
 0x4a,  0x99,  0x62,  0x8d,  0x1d,  0x84,  0x61,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03, 
 0x2a,  0x76,  0x32,  0xe2,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x06,  0x03,  0x38,  0x91,  0xa2,  0x82,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x22,  0x4c,  0xb9,  0x88,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x1c,  0x89,  0x7c,  0xd3, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0c,  0x15,  0xd6,  0x17,  0x12,  0x00, 
 0xe3,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xe8,  0xab,  0xe9,  0x6a,  0x1e,  0x7c,  0x7a, 
 0x59,  0xb4,  0xbc,  0x9d,  0x32,  0x25,  0x28,  0x00,  0xcb,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x69,  0x6e,  0x73,  0x70, 
 0x69,  0x72,  0x65,  0x3a,  0x3a,  0x69,  0x6e,  0x73,  0x70,  0x69,  0x72,  0x65,  0x5f,  0x68,  0x61,  0x6e, 
 0x64,  0x5f,  0x63,  0x74,  0x72,  0x6c,  0x00,  0x00,  0x9b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x1a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03, 
 0x08,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x5f,  0x73,  0x65,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03, 
 0x0a,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x6c,  0x65,  0x5f,  0x73,  0x65,  0x74,  0x00,  0x00,  0x00, 
 0x1c,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03, 
 0x0a,  0x00,  0x00,  0x00,  0x66,  0x6f,  0x72,  0x63,  0x65,  0x5f,  0x73,  0x65,  0x74,  0x00,  0x00,  0x00, 
 0x1c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03, 
 0x0a,  0x00,  0x00,  0x00,  0x73,  0x70,  0x65,  0x65,  0x64,  0x5f,  0x73,  0x65,  0x74,  0x00,  0x00,  0x00, 
 0x13,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0c,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x6d,  0x6f,  0x64,  0x65,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0xe8,  0xab,  0xe9,  0x6a,  0x1e,  0x7c,  0x7a,  0x59,  0xb4,  0xbc,  0x9d,  0x32,  0x25,  0x28,  0xf1, 
 0xcd,  0xeb,  0xe3,  0x9d,  0x58,  0x9e,  0x3a,  0x4a,  0x99,  0x62,  0x8d,  0x1d,  0x84,  0x61, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::inspire::inspire_hand_ctrl>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xcd,  0xeb,  0xe3,  0x9d,  0x58,  0x9e,  0x3a,  0x4a,  0x99,  0x62,  0x8d, 
 0x1d,  0x84,  0x61,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xe8,  0xab,  0xe9,  0x6a,  0x1e,  0x7c,  0x7a,  0x59,  0xb4,  0xbc,  0x9d, 
 0x32,  0x25,  0x28,  0x00,  0xcf,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::inspire::inspire_hand_ctrl>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::inspire::inspire_hand_ctrl>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::inspire::inspire_hand_ctrl)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::inspire::inspire_hand_ctrl>();

// namespace {
//   static const volatile propvec &properties___inspire__inspire_hand_ctrl = get_type_props<::inspire::inspire_hand_ctrl>();
// }

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::inspire::inspire_hand_ctrl& instance, entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pos_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.pos_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.angle_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.force_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.force_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.speed_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.speed_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::inspire::inspire_hand_ctrl& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_ctrl>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::inspire::inspire_hand_ctrl& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pos_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.pos_set().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.pos_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.angle_set().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.angle_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.force_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.force_set().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.force_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.speed_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.speed_set().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.speed_set()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::inspire::inspire_hand_ctrl& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_ctrl>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::inspire::inspire_hand_ctrl& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pos_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.force_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.speed_set().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::inspire::inspire_hand_ctrl& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_ctrl>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::inspire::inspire_hand_ctrl& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::inspire::inspire_hand_ctrl& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_ctrl>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_INSPIRE_HAND_CTRL_HPP_925674ADC5EE42F268CBA1FFDD5480B1
