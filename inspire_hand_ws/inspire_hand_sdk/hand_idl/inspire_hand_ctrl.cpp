/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/me/h1_inspire_service.worktrees/Yxy_Dev/hand_idl/inspire_hand_ctrl.idl
  Source: inspire_hand_ctrl.cpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#include "inspire_hand_ctrl.hpp"
#include <iostream>
// #include <org/eclipse/cyclonedds/util/ostream_operators.hpp>
namespace inspire
{

template<typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec)
{
    os << "[";
    for (size_t i = 0; i < vec.size(); ++i)
    {
        os << vec[i];
        if (i != vec.size() - 1)
        {
            os << ", ";
        }
    }
    os << "]";
    return os;
}

std::ostream& operator<<(std::ostream& os, inspire_hand_ctrl const& rhs)
{
  (void) rhs;
  os << "[";
  os << "pos_set: " << rhs.pos_set();
  os << ", angle_set: " << rhs.angle_set();
  os << ", force_set: " << rhs.force_set();
  os << ", speed_set: " << rhs.speed_set();
  os << ", mode: " << rhs.mode();
  os << "]";
  return os;
}

} //namespace inspire

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::inspire::inspire_hand_ctrl>() {
  static thread_local std::mutex mtx;
  static thread_local propvec props;
  static thread_local entity_properties_t *props_end = nullptr;
  static thread_local std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::pos_set
  props.push_back(entity_properties_t(1, 1, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::angle_set
  props.push_back(entity_properties_t(1, 2, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::force_set
  props.push_back(entity_properties_t(1, 3, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::speed_set
  props.push_back(entity_properties_t(1, 4, false, get_bit_bound<int8_t>(), extensibility::ext_final, false));  //::mode

  entity_properties_t::finish(props, keylist);
  props_end = props.data() + props.size();
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

