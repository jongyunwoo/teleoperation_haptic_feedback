/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/me/h1_inspire_service.worktrees/Yxy_Dev/hand_idl/inspire_hand_state.idl
  Source: inspire_hand_state.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_INSPIRE_HAND_STATE_HPP_C2D90E662097050B3432867B30B7AAC6
#define DDSCXX_INSPIRE_HAND_STATE_HPP_C2D90E662097050B3432867B30B7AAC6

#include <utility>
#include <ostream>
#include <cstdint>
#include <vector>

namespace inspire
{
class inspire_hand_state
{
private:
 std::vector<int16_t> pos_act_;
 std::vector<int16_t> angle_act_;
 std::vector<int16_t> force_act_;
 std::vector<int16_t> current_;
 std::vector<uint8_t> err_;
 std::vector<uint8_t> status_;
 std::vector<uint8_t> temperature_;

public:
  inspire_hand_state() = default;

  explicit inspire_hand_state(
    const std::vector<int16_t>& pos_act,
    const std::vector<int16_t>& angle_act,
    const std::vector<int16_t>& force_act,
    const std::vector<int16_t>& current,
    const std::vector<uint8_t>& err,
    const std::vector<uint8_t>& status,
    const std::vector<uint8_t>& temperature) :
    pos_act_(pos_act),
    angle_act_(angle_act),
    force_act_(force_act),
    current_(current),
    err_(err),
    status_(status),
    temperature_(temperature) { }

  const std::vector<int16_t>& pos_act() const { return this->pos_act_; }
  std::vector<int16_t>& pos_act() { return this->pos_act_; }
  void pos_act(const std::vector<int16_t>& _val_) { this->pos_act_ = _val_; }
  void pos_act(std::vector<int16_t>&& _val_) { this->pos_act_ = std::move(_val_); }
  const std::vector<int16_t>& angle_act() const { return this->angle_act_; }
  std::vector<int16_t>& angle_act() { return this->angle_act_; }
  void angle_act(const std::vector<int16_t>& _val_) { this->angle_act_ = _val_; }
  void angle_act(std::vector<int16_t>&& _val_) { this->angle_act_ = std::move(_val_); }
  const std::vector<int16_t>& force_act() const { return this->force_act_; }
  std::vector<int16_t>& force_act() { return this->force_act_; }
  void force_act(const std::vector<int16_t>& _val_) { this->force_act_ = _val_; }
  void force_act(std::vector<int16_t>&& _val_) { this->force_act_ = std::move(_val_); }
  const std::vector<int16_t>& current() const { return this->current_; }
  std::vector<int16_t>& current() { return this->current_; }
  void current(const std::vector<int16_t>& _val_) { this->current_ = _val_; }
  void current(std::vector<int16_t>&& _val_) { this->current_ = std::move(_val_); }
  const std::vector<uint8_t>& err() const { return this->err_; }
  std::vector<uint8_t>& err() { return this->err_; }
  void err(const std::vector<uint8_t>& _val_) { this->err_ = _val_; }
  void err(std::vector<uint8_t>&& _val_) { this->err_ = std::move(_val_); }
  const std::vector<uint8_t>& status() const { return this->status_; }
  std::vector<uint8_t>& status() { return this->status_; }
  void status(const std::vector<uint8_t>& _val_) { this->status_ = _val_; }
  void status(std::vector<uint8_t>&& _val_) { this->status_ = std::move(_val_); }
  const std::vector<uint8_t>& temperature() const { return this->temperature_; }
  std::vector<uint8_t>& temperature() { return this->temperature_; }
  void temperature(const std::vector<uint8_t>& _val_) { this->temperature_ = _val_; }
  void temperature(std::vector<uint8_t>&& _val_) { this->temperature_ = std::move(_val_); }

  bool operator==(const inspire_hand_state& _other) const
  {
    (void) _other;
    return pos_act_ == _other.pos_act_ &&
      angle_act_ == _other.angle_act_ &&
      force_act_ == _other.force_act_ &&
      current_ == _other.current_ &&
      err_ == _other.err_ &&
      status_ == _other.status_ &&
      temperature_ == _other.temperature_;
  }

  bool operator!=(const inspire_hand_state& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, inspire_hand_state const& rhs);

} //namespace inspire

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::inspire::inspire_hand_state>::getTypeName()
{
  return "inspire::inspire_hand_state";
}

template <> constexpr bool TopicTraits<::inspire::inspire_hand_state>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::inspire::inspire_hand_state>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::inspire::inspire_hand_state>::type_map_blob_sz() { return 530; }
template<> constexpr unsigned int TopicTraits<::inspire::inspire_hand_state>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::inspire::inspire_hand_state>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xb8,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x44,  0xab,  0x34,  0x91,  0x68,  0x1b,  0xfb, 
 0x53,  0x3b,  0xfc,  0x43,  0xd7,  0x5c,  0x33,  0x00,  0xa0,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x90,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03, 
 0x26,  0x5a,  0x29,  0x1c,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x06,  0x03,  0x68,  0xda,  0x6f,  0xf2,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0xae,  0xb7,  0x0a,  0x74,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x43,  0xb5,  0xc9,  0x17, 
 0x10,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x0d, 
 0x56,  0xbd,  0x71,  0x07,  0x10,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x06,  0x0d,  0x9a,  0xcb,  0x44,  0x54,  0x10,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x0d,  0xee,  0xf4,  0x38,  0xf7,  0x2a,  0x01,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0xed,  0xb0,  0x80,  0xff,  0x35,  0x91,  0xf6,  0x3e,  0xff,  0x23,  0x67, 
 0x03,  0xd2,  0x2c,  0x00,  0x12,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x69,  0x6e,  0x73,  0x70,  0x69,  0x72,  0x65,  0x3a, 
 0x3a,  0x69,  0x6e,  0x73,  0x70,  0x69,  0x72,  0x65,  0x5f,  0x68,  0x61,  0x6e,  0x64,  0x5f,  0x73,  0x74, 
 0x61,  0x74,  0x65,  0x00,  0xe2,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x08,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x5f,  0x61,  0x63,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x0a,  0x00,  0x00,  0x00, 
 0x61,  0x6e,  0x67,  0x6c,  0x65,  0x5f,  0x61,  0x63,  0x74,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x0a,  0x00,  0x00,  0x00, 
 0x66,  0x6f,  0x72,  0x63,  0x65,  0x5f,  0x61,  0x63,  0x74,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x03,  0x08,  0x00,  0x00,  0x00, 
 0x63,  0x75,  0x72,  0x72,  0x65,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x0d,  0x04,  0x00,  0x00,  0x00, 
 0x65,  0x72,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x0d,  0x07,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x74, 
 0x75,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x06,  0x0d,  0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70, 
 0x65,  0x72,  0x61,  0x74,  0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0xed,  0xb0,  0x80,  0xff,  0x35,  0x91,  0xf6,  0x3e,  0xff,  0x23,  0x67, 
 0x03,  0xd2,  0x2c,  0xf1,  0x44,  0xab,  0x34,  0x91,  0x68,  0x1b,  0xfb,  0x53,  0x3b,  0xfc,  0x43,  0xd7, 
 0x5c,  0x33, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::inspire::inspire_hand_state>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x44,  0xab,  0x34,  0x91,  0x68,  0x1b,  0xfb,  0x53,  0x3b,  0xfc,  0x43, 
 0xd7,  0x5c,  0x33,  0x00,  0xa4,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xed,  0xb0,  0x80,  0xff,  0x35,  0x91,  0xf6,  0x3e,  0xff,  0x23,  0x67, 
 0x03,  0xd2,  0x2c,  0x00,  0x16,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::inspire::inspire_hand_state>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::inspire::inspire_hand_state>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::inspire::inspire_hand_state)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::inspire::inspire_hand_state>();

// namespace {
//   static const volatile propvec &properties___inspire__inspire_hand_state = get_type_props<::inspire::inspire_hand_state>();
// }

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::inspire::inspire_hand_state& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pos_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.pos_act()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.angle_act()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.force_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.force_act()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.current().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.current()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.err().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.err()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.status().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.status()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.temperature().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.temperature()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::inspire::inspire_hand_state& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_state>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::inspire::inspire_hand_state& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pos_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.pos_act().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.pos_act()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.angle_act().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.angle_act()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.force_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.force_act().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.force_act()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.current().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.current().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.current()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.err().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.err().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.err()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.status().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.status().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.status()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.temperature().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.temperature().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.temperature()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::inspire::inspire_hand_state& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_state>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::inspire::inspire_hand_state& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pos_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.force_act().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.current().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.err().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.status().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.temperature().size());
      if (se_1 > 6 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::inspire::inspire_hand_state& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_state>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::inspire::inspire_hand_state& instance,  entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 6;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, uint8_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::inspire::inspire_hand_state& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_state>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_INSPIRE_HAND_STATE_HPP_C2D90E662097050B3432867B30B7AAC6
