/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /home/me/h1_inspire_service.worktrees/Yxy_Dev/hand_idl/inspire_hand_touch.idl
  Source: inspire_hand_touch.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_INSPIRE_HAND_TOUCH_HPP_7245C6324D85FCE542D950E501077E26
#define DDSCXX_INSPIRE_HAND_TOUCH_HPP_7245C6324D85FCE542D950E501077E26

#include <utility>
#include <ostream>
#include <cstdint>
#include <vector>

namespace inspire
{
class inspire_hand_touch
{
private:
 std::vector<int16_t> fingerone_tip_touch_;
 std::vector<int16_t> fingerone_top_touch_;
 std::vector<int16_t> fingerone_palm_touch_;
 std::vector<int16_t> fingertwo_tip_touch_;
 std::vector<int16_t> fingertwo_top_touch_;
 std::vector<int16_t> fingertwo_palm_touch_;
 std::vector<int16_t> fingerthree_tip_touch_;
 std::vector<int16_t> fingerthree_top_touch_;
 std::vector<int16_t> fingerthree_palm_touch_;
 std::vector<int16_t> fingerfour_tip_touch_;
 std::vector<int16_t> fingerfour_top_touch_;
 std::vector<int16_t> fingerfour_palm_touch_;
 std::vector<int16_t> fingerfive_tip_touch_;
 std::vector<int16_t> fingerfive_top_touch_;
 std::vector<int16_t> fingerfive_middle_touch_;
 std::vector<int16_t> fingerfive_palm_touch_;
 std::vector<int16_t> palm_touch_;

public:
  inspire_hand_touch() = default;

  explicit inspire_hand_touch(
    const std::vector<int16_t>& fingerone_tip_touch,
    const std::vector<int16_t>& fingerone_top_touch,
    const std::vector<int16_t>& fingerone_palm_touch,
    const std::vector<int16_t>& fingertwo_tip_touch,
    const std::vector<int16_t>& fingertwo_top_touch,
    const std::vector<int16_t>& fingertwo_palm_touch,
    const std::vector<int16_t>& fingerthree_tip_touch,
    const std::vector<int16_t>& fingerthree_top_touch,
    const std::vector<int16_t>& fingerthree_palm_touch,
    const std::vector<int16_t>& fingerfour_tip_touch,
    const std::vector<int16_t>& fingerfour_top_touch,
    const std::vector<int16_t>& fingerfour_palm_touch,
    const std::vector<int16_t>& fingerfive_tip_touch,
    const std::vector<int16_t>& fingerfive_top_touch,
    const std::vector<int16_t>& fingerfive_middle_touch,
    const std::vector<int16_t>& fingerfive_palm_touch,
    const std::vector<int16_t>& palm_touch) :
    fingerone_tip_touch_(fingerone_tip_touch),
    fingerone_top_touch_(fingerone_top_touch),
    fingerone_palm_touch_(fingerone_palm_touch),
    fingertwo_tip_touch_(fingertwo_tip_touch),
    fingertwo_top_touch_(fingertwo_top_touch),
    fingertwo_palm_touch_(fingertwo_palm_touch),
    fingerthree_tip_touch_(fingerthree_tip_touch),
    fingerthree_top_touch_(fingerthree_top_touch),
    fingerthree_palm_touch_(fingerthree_palm_touch),
    fingerfour_tip_touch_(fingerfour_tip_touch),
    fingerfour_top_touch_(fingerfour_top_touch),
    fingerfour_palm_touch_(fingerfour_palm_touch),
    fingerfive_tip_touch_(fingerfive_tip_touch),
    fingerfive_top_touch_(fingerfive_top_touch),
    fingerfive_middle_touch_(fingerfive_middle_touch),
    fingerfive_palm_touch_(fingerfive_palm_touch),
    palm_touch_(palm_touch) { }

  const std::vector<int16_t>& fingerone_tip_touch() const { return this->fingerone_tip_touch_; }
  std::vector<int16_t>& fingerone_tip_touch() { return this->fingerone_tip_touch_; }
  void fingerone_tip_touch(const std::vector<int16_t>& _val_) { this->fingerone_tip_touch_ = _val_; }
  void fingerone_tip_touch(std::vector<int16_t>&& _val_) { this->fingerone_tip_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerone_top_touch() const { return this->fingerone_top_touch_; }
  std::vector<int16_t>& fingerone_top_touch() { return this->fingerone_top_touch_; }
  void fingerone_top_touch(const std::vector<int16_t>& _val_) { this->fingerone_top_touch_ = _val_; }
  void fingerone_top_touch(std::vector<int16_t>&& _val_) { this->fingerone_top_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerone_palm_touch() const { return this->fingerone_palm_touch_; }
  std::vector<int16_t>& fingerone_palm_touch() { return this->fingerone_palm_touch_; }
  void fingerone_palm_touch(const std::vector<int16_t>& _val_) { this->fingerone_palm_touch_ = _val_; }
  void fingerone_palm_touch(std::vector<int16_t>&& _val_) { this->fingerone_palm_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingertwo_tip_touch() const { return this->fingertwo_tip_touch_; }
  std::vector<int16_t>& fingertwo_tip_touch() { return this->fingertwo_tip_touch_; }
  void fingertwo_tip_touch(const std::vector<int16_t>& _val_) { this->fingertwo_tip_touch_ = _val_; }
  void fingertwo_tip_touch(std::vector<int16_t>&& _val_) { this->fingertwo_tip_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingertwo_top_touch() const { return this->fingertwo_top_touch_; }
  std::vector<int16_t>& fingertwo_top_touch() { return this->fingertwo_top_touch_; }
  void fingertwo_top_touch(const std::vector<int16_t>& _val_) { this->fingertwo_top_touch_ = _val_; }
  void fingertwo_top_touch(std::vector<int16_t>&& _val_) { this->fingertwo_top_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingertwo_palm_touch() const { return this->fingertwo_palm_touch_; }
  std::vector<int16_t>& fingertwo_palm_touch() { return this->fingertwo_palm_touch_; }
  void fingertwo_palm_touch(const std::vector<int16_t>& _val_) { this->fingertwo_palm_touch_ = _val_; }
  void fingertwo_palm_touch(std::vector<int16_t>&& _val_) { this->fingertwo_palm_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerthree_tip_touch() const { return this->fingerthree_tip_touch_; }
  std::vector<int16_t>& fingerthree_tip_touch() { return this->fingerthree_tip_touch_; }
  void fingerthree_tip_touch(const std::vector<int16_t>& _val_) { this->fingerthree_tip_touch_ = _val_; }
  void fingerthree_tip_touch(std::vector<int16_t>&& _val_) { this->fingerthree_tip_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerthree_top_touch() const { return this->fingerthree_top_touch_; }
  std::vector<int16_t>& fingerthree_top_touch() { return this->fingerthree_top_touch_; }
  void fingerthree_top_touch(const std::vector<int16_t>& _val_) { this->fingerthree_top_touch_ = _val_; }
  void fingerthree_top_touch(std::vector<int16_t>&& _val_) { this->fingerthree_top_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerthree_palm_touch() const { return this->fingerthree_palm_touch_; }
  std::vector<int16_t>& fingerthree_palm_touch() { return this->fingerthree_palm_touch_; }
  void fingerthree_palm_touch(const std::vector<int16_t>& _val_) { this->fingerthree_palm_touch_ = _val_; }
  void fingerthree_palm_touch(std::vector<int16_t>&& _val_) { this->fingerthree_palm_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfour_tip_touch() const { return this->fingerfour_tip_touch_; }
  std::vector<int16_t>& fingerfour_tip_touch() { return this->fingerfour_tip_touch_; }
  void fingerfour_tip_touch(const std::vector<int16_t>& _val_) { this->fingerfour_tip_touch_ = _val_; }
  void fingerfour_tip_touch(std::vector<int16_t>&& _val_) { this->fingerfour_tip_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfour_top_touch() const { return this->fingerfour_top_touch_; }
  std::vector<int16_t>& fingerfour_top_touch() { return this->fingerfour_top_touch_; }
  void fingerfour_top_touch(const std::vector<int16_t>& _val_) { this->fingerfour_top_touch_ = _val_; }
  void fingerfour_top_touch(std::vector<int16_t>&& _val_) { this->fingerfour_top_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfour_palm_touch() const { return this->fingerfour_palm_touch_; }
  std::vector<int16_t>& fingerfour_palm_touch() { return this->fingerfour_palm_touch_; }
  void fingerfour_palm_touch(const std::vector<int16_t>& _val_) { this->fingerfour_palm_touch_ = _val_; }
  void fingerfour_palm_touch(std::vector<int16_t>&& _val_) { this->fingerfour_palm_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfive_tip_touch() const { return this->fingerfive_tip_touch_; }
  std::vector<int16_t>& fingerfive_tip_touch() { return this->fingerfive_tip_touch_; }
  void fingerfive_tip_touch(const std::vector<int16_t>& _val_) { this->fingerfive_tip_touch_ = _val_; }
  void fingerfive_tip_touch(std::vector<int16_t>&& _val_) { this->fingerfive_tip_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfive_top_touch() const { return this->fingerfive_top_touch_; }
  std::vector<int16_t>& fingerfive_top_touch() { return this->fingerfive_top_touch_; }
  void fingerfive_top_touch(const std::vector<int16_t>& _val_) { this->fingerfive_top_touch_ = _val_; }
  void fingerfive_top_touch(std::vector<int16_t>&& _val_) { this->fingerfive_top_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfive_middle_touch() const { return this->fingerfive_middle_touch_; }
  std::vector<int16_t>& fingerfive_middle_touch() { return this->fingerfive_middle_touch_; }
  void fingerfive_middle_touch(const std::vector<int16_t>& _val_) { this->fingerfive_middle_touch_ = _val_; }
  void fingerfive_middle_touch(std::vector<int16_t>&& _val_) { this->fingerfive_middle_touch_ = std::move(_val_); }
  const std::vector<int16_t>& fingerfive_palm_touch() const { return this->fingerfive_palm_touch_; }
  std::vector<int16_t>& fingerfive_palm_touch() { return this->fingerfive_palm_touch_; }
  void fingerfive_palm_touch(const std::vector<int16_t>& _val_) { this->fingerfive_palm_touch_ = _val_; }
  void fingerfive_palm_touch(std::vector<int16_t>&& _val_) { this->fingerfive_palm_touch_ = std::move(_val_); }
  const std::vector<int16_t>& palm_touch() const { return this->palm_touch_; }
  std::vector<int16_t>& palm_touch() { return this->palm_touch_; }
  void palm_touch(const std::vector<int16_t>& _val_) { this->palm_touch_ = _val_; }
  void palm_touch(std::vector<int16_t>&& _val_) { this->palm_touch_ = std::move(_val_); }

  bool operator==(const inspire_hand_touch& _other) const
  {
    (void) _other;
    return fingerone_tip_touch_ == _other.fingerone_tip_touch_ &&
      fingerone_top_touch_ == _other.fingerone_top_touch_ &&
      fingerone_palm_touch_ == _other.fingerone_palm_touch_ &&
      fingertwo_tip_touch_ == _other.fingertwo_tip_touch_ &&
      fingertwo_top_touch_ == _other.fingertwo_top_touch_ &&
      fingertwo_palm_touch_ == _other.fingertwo_palm_touch_ &&
      fingerthree_tip_touch_ == _other.fingerthree_tip_touch_ &&
      fingerthree_top_touch_ == _other.fingerthree_top_touch_ &&
      fingerthree_palm_touch_ == _other.fingerthree_palm_touch_ &&
      fingerfour_tip_touch_ == _other.fingerfour_tip_touch_ &&
      fingerfour_top_touch_ == _other.fingerfour_top_touch_ &&
      fingerfour_palm_touch_ == _other.fingerfour_palm_touch_ &&
      fingerfive_tip_touch_ == _other.fingerfive_tip_touch_ &&
      fingerfive_top_touch_ == _other.fingerfive_top_touch_ &&
      fingerfive_middle_touch_ == _other.fingerfive_middle_touch_ &&
      fingerfive_palm_touch_ == _other.fingerfive_palm_touch_ &&
      palm_touch_ == _other.palm_touch_;
  }

  bool operator!=(const inspire_hand_touch& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, inspire_hand_touch const& rhs);

} //namespace inspire

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::inspire::inspire_hand_touch>::getTypeName()
{
  return "inspire::inspire_hand_touch";
}

template <> constexpr bool TopicTraits<::inspire::inspire_hand_touch>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::inspire::inspire_hand_touch>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::inspire::inspire_hand_touch>::type_map_blob_sz() { return 1254; }
template<> constexpr unsigned int TopicTraits<::inspire::inspire_hand_touch>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::inspire::inspire_hand_touch>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x80,  0x01,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xbd,  0x86,  0x7d,  0xe3,  0xf7,  0x99,  0x9a, 
 0xa7,  0x1e,  0x2d,  0xd9,  0x1f,  0x6d,  0x3c,  0x00,  0x68,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x58,  0x01,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03, 
 0xad,  0x79,  0x10,  0xf1,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x60,  0x03,  0x1a,  0xd3,  0x3a,  0xd9,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x50,  0x03,  0x51,  0x7e,  0x9b,  0xea,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03,  0xe9,  0x19,  0x5b,  0x96, 
 0x10,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03, 
 0xe6,  0xb5,  0xe7,  0x80,  0x10,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x50,  0x03,  0x7b,  0x03,  0x1c,  0x1b,  0x10,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03,  0xde,  0xbb,  0x02,  0x7b,  0x10,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03,  0xf3,  0x04,  0xd7,  0x92, 
 0x10,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x50,  0x03, 
 0xb9,  0x81,  0xe4,  0x56,  0x10,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x09,  0x03,  0x83,  0xb8,  0x42,  0x92,  0x10,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03,  0x49,  0xeb,  0x81,  0xe5,  0x10,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x50,  0x03,  0x7c,  0xed,  0x1f,  0x68, 
 0x10,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03, 
 0x8d,  0xd9,  0xb7,  0x37,  0x10,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x60,  0x03,  0xe6,  0xfe,  0x2c,  0x1b,  0x10,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03,  0x73,  0xa6,  0xf2,  0x86,  0x10,  0x00,  0x00,  0x00, 
 0x0f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03,  0xab,  0x88,  0xc7,  0x31, 
 0x10,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x70,  0x03, 
 0xa7,  0xc7,  0x5e,  0x96,  0x35,  0x03,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x4a,  0x4b,  0x52, 
 0xa5,  0x81,  0x2d,  0x49,  0xd1,  0x94,  0xc8,  0x61,  0x6e,  0x43,  0x0f,  0x00,  0x1d,  0x03,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x69,  0x6e,  0x73,  0x70,  0x69,  0x72,  0x65,  0x3a,  0x3a,  0x69,  0x6e,  0x73,  0x70,  0x69,  0x72,  0x65, 
 0x5f,  0x68,  0x61,  0x6e,  0x64,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0xed,  0x02,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x09,  0x03,  0x14,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x6f,  0x6e, 
 0x65,  0x5f,  0x74,  0x69,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03, 
 0x14,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x6f,  0x6e,  0x65,  0x5f,  0x74,  0x6f, 
 0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x50,  0x03,  0x15,  0x00,  0x00,  0x00, 
 0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x6f,  0x6e,  0x65,  0x5f,  0x70,  0x61,  0x6c,  0x6d,  0x5f,  0x74, 
 0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03,  0x14,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67, 
 0x65,  0x72,  0x74,  0x77,  0x6f,  0x5f,  0x74,  0x69,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x60,  0x03,  0x14,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x74,  0x77, 
 0x6f,  0x5f,  0x74,  0x6f,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x50,  0x03, 
 0x15,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x74,  0x77,  0x6f,  0x5f,  0x70,  0x61, 
 0x6c,  0x6d,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03,  0x16,  0x00,  0x00,  0x00, 
 0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x74,  0x68,  0x72,  0x65,  0x65,  0x5f,  0x74,  0x69,  0x70,  0x5f, 
 0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03,  0x16,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67, 
 0x65,  0x72,  0x74,  0x68,  0x72,  0x65,  0x65,  0x5f,  0x74,  0x6f,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63, 
 0x68,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x50,  0x03,  0x17,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x74,  0x68, 
 0x72,  0x65,  0x65,  0x5f,  0x70,  0x61,  0x6c,  0x6d,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x09,  0x03,  0x15,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x66,  0x6f, 
 0x75,  0x72,  0x5f,  0x74,  0x69,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03, 
 0x15,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x66,  0x6f,  0x75,  0x72,  0x5f,  0x74, 
 0x6f,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x50,  0x03,  0x16,  0x00,  0x00,  0x00, 
 0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x66,  0x6f,  0x75,  0x72,  0x5f,  0x70,  0x61,  0x6c,  0x6d,  0x5f, 
 0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03,  0x15,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67, 
 0x65,  0x72,  0x66,  0x69,  0x76,  0x65,  0x5f,  0x74,  0x69,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68, 
 0x00,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x60,  0x03,  0x15,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x66,  0x69, 
 0x76,  0x65,  0x5f,  0x74,  0x6f,  0x70,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x09,  0x03, 
 0x18,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x66,  0x69,  0x76,  0x65,  0x5f,  0x6d, 
 0x69,  0x64,  0x64,  0x6c,  0x65,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x28,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x60,  0x03, 
 0x16,  0x00,  0x00,  0x00,  0x66,  0x69,  0x6e,  0x67,  0x65,  0x72,  0x66,  0x69,  0x76,  0x65,  0x5f,  0x70, 
 0x61,  0x6c,  0x6d,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x70,  0x03,  0x0b,  0x00,  0x00,  0x00, 
 0x70,  0x61,  0x6c,  0x6d,  0x5f,  0x74,  0x6f,  0x75,  0x63,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x4a,  0x4b,  0x52,  0xa5,  0x81,  0x2d,  0x49, 
 0xd1,  0x94,  0xc8,  0x61,  0x6e,  0x43,  0x0f,  0xf1,  0xbd,  0x86,  0x7d,  0xe3,  0xf7,  0x99,  0x9a,  0xa7, 
 0x1e,  0x2d,  0xd9,  0x1f,  0x6d,  0x3c, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::inspire::inspire_hand_touch>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xbd,  0x86,  0x7d,  0xe3,  0xf7,  0x99,  0x9a,  0xa7,  0x1e,  0x2d,  0xd9, 
 0x1f,  0x6d,  0x3c,  0x00,  0x6c,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x4a,  0x4b,  0x52,  0xa5,  0x81,  0x2d,  0x49,  0xd1,  0x94,  0xc8,  0x61, 
 0x6e,  0x43,  0x0f,  0x00,  0x21,  0x03,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::inspire::inspire_hand_touch>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::inspire::inspire_hand_touch>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::inspire::inspire_hand_touch)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::inspire::inspire_hand_touch>();

// namespace {
//   static const volatile propvec &properties___inspire__inspire_hand_touch = get_type_props<::inspire::inspire_hand_touch>();
// }

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::inspire::inspire_hand_touch& instance, entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerone_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerone_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerone_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingertwo_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingertwo_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingertwo_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerthree_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerthree_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerthree_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfour_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfour_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfour_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfive_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfive_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_middle_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfive_middle_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_palm_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.fingerfive_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.palm_touch().size());
      if (se_1 > 112 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::inspire::inspire_hand_touch& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_touch>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::inspire::inspire_hand_touch& instance, entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerone_tip_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerone_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerone_top_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerone_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerone_palm_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerone_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingertwo_tip_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingertwo_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingertwo_top_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingertwo_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingertwo_palm_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingertwo_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerthree_tip_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerthree_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerthree_top_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerthree_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerthree_palm_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerthree_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfour_tip_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfour_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfour_top_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfour_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfour_palm_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfour_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfive_tip_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfive_tip_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfive_top_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfive_top_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_middle_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfive_middle_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfive_middle_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_palm_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.fingerfive_palm_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.fingerfive_palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.palm_touch().size());
      if (se_1 > 112 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.palm_touch().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.palm_touch()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::inspire::inspire_hand_touch& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_touch>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::inspire::inspire_hand_touch& instance, entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerone_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingertwo_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerthree_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfour_palm_touch().size());
      if (se_1 > 80 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_tip_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_top_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_middle_touch().size());
      if (se_1 > 9 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.fingerfive_palm_touch().size());
      if (se_1 > 96 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.palm_touch().size());
      if (se_1 > 112 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::inspire::inspire_hand_touch& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_touch>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::inspire::inspire_hand_touch& instance, entity_properties_t *props) {
  (void)instance;
  
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 9;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 96;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 80;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 9;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 96;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 80;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 9;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 96;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 80;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 9;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 96;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 80;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 9;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 96;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 9;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 96;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 112;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::inspire::inspire_hand_touch& instance, bool key) {
  auto &props = get_type_props<::inspire::inspire_hand_touch>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_INSPIRE_HAND_TOUCH_HPP_7245C6324D85FCE542D950E501077E26
